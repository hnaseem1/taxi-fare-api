executed = 0
// GETTING THE SELFLOCATION FOR THE START LOCATION

var locationButton = document.querySelectorAll('.get-location-data')
var inputField = document.getElementById('autocomplete')
locationButton[0].addEventListener('click', geoFindMe)

function geoFindMe() {
  if (!navigator.geolocation){
    alert( "Geolocation is not supported by your browser")
    return;
  }
  inputField.disabled = true;
  inputField.value = ''
  inputField.placeholder = 'Getting your location...'

  function success(position) {

     var pos = {
      lat: position.coords.latitude,
      lng: position.coords.longitude
      };
  // ajax call to google maps to find readible address from location data
    var response = $.ajax({
        url: 'https://maps.googleapis.com/maps/api/geocode/json?latlng='+pos.lat+', '+pos.lng+'&key=AIzaSyDxHtxeT7TcaPqz8y2tPRWbqIwB9ROdZfk',
        method: 'GET',
        dataType: 'json'
      }).done(function(data) {
        inputField.disabled = false;
        inputField.value = response.responseJSON.results[0].formatted_address
        inputField.placeholder = 'Start location'
        document.getElementById('autocomplete').style.border = ''
      });
  }

  function error() {
    alert("Unable to retrieve your location");
    inputField.disabled = false;
    inputField.placeholder = 'Start location'
  }
  navigator.geolocation.getCurrentPosition(success, error);
}


// GETTING THE SELFLOCATION FOR THE DESTINATION LOCATION
// setting up event listener on the destination field for getting current location
var inputField2 = document.getElementById('autocomplete2')
locationButton[1].addEventListener('click', geoFindMe2)

function geoFindMe2() {
  if (!navigator.geolocation){
    alert( "Geolocation is not supported by your browser")
    return;
  }
  inputField2.disabled = true;
  inputField2.value = ''
  inputField2.placeholder = 'Getting your location...'

  function success(position) {

     var pos = {
      lat: position.coords.latitude,
      lng: position.coords.longitude
      };
  // ajax call to google maps to find readible address from location data
    var response = $.ajax({
        url: 'https://maps.googleapis.com/maps/api/geocode/json?latlng='+pos.lat+', '+pos.lng+'&key=AIzaSyDxHtxeT7TcaPqz8y2tPRWbqIwB9ROdZfk',
        method: 'GET',
        dataType: 'json'
      }).done(function(data) {
        inputField2.disabled = false;
        inputField2.value = response.responseJSON.results[0].formatted_address
        inputField.placeholder = 'Destination'
        document.getElementById('autocomplete2').style.border = ''
      });
  }

  function error() {
    alert("Unable to retrieve your location");
    inputField2.disabled = false;
    inputField2.placeholder = 'Destination'

  }
  navigator.geolocation.getCurrentPosition(success, error);
}
//===================================================================================================================================
// =====================    AUTOCOMPLETE FIELDS    =====================
var autocomplete, autocomplete2;
function initAutocomplete() {
// Create the autocomplete object, restricting the search to geographical
// location types.
autocomplete2 = new google.maps.places.Autocomplete(
    /** @type {!HTMLInputElement} */(document.getElementById('autocomplete2')),
    {types: ['geocode']});
autocomplete = new google.maps.places.Autocomplete(
    /** @type {!HTMLInputElement} */(document.getElementById('autocomplete')),
    {types: ['geocode']});
}
//====================================================================================================================================
// function to initiate maps with point a to point b


function initMap() {
  map = new google.maps.Map(document.getElementById('map'), {
  zoom: 4,
  center: {lat: 43.6867, lng: -79.3682}  // Australia.
});
var directionsService = new google.maps.DirectionsService;
var directionsDisplay = new google.maps.DirectionsRenderer({
  draggable: true,
  map: map,
});
directionsDisplay.addListener('directions_changed', function() {
  computeTotalDistance(directionsDisplay.getDirections());
  document.getElementById('autocomplete').value = myroute.legs[0].start_address
  document.getElementById('autocomplete2').value = myroute.legs[0].end_address
});
ori = document.getElementById('autocomplete').value,
dest = document.getElementById('autocomplete2').value,
displayRoute(ori, dest, directionsService,
    directionsDisplay);
}
function displayRoute(origin, destination, service, display) {
service.route({
  origin: origin,
  destination: destination,
  travelMode: 'DRIVING',
}, function(response, status) {
  if (status === 'OK') {
  document.getElementById('map').style.display = ''
    display.setDirections(response);
  } else {
    alert('Could not display directions due to: ' + status);
  }
});
}
function computeTotalDistance(result) {
total = 0;
myroute = result.routes[0];
for (var i = 0; i < myroute.legs.length; i++) {
  total += myroute.legs[i].distance.value;
}
total = total / 1000;
setMarkers(map)
}
//=======================================================================================================================
//         FUNCTION TO DISPLAY THE STREETVIEW

function showstreetview() {


var frame = document.getElementById('streetview_iframe')
var map = document.querySelector('#map')
var mapParent = document.querySelector('.map-and-filter')

if (frame.style.display === "none") {

  map.style.display = 'none'
  frame.setAttribute("src", "https://www.google.com/maps/embed/v1/streetview?key=AIzaSyAZ3ifPNHQmtRy0cRSrQ6xmzfWo0IF93hY&location="+end_lat+","+end_lon);
  map.id = 'streetview_iframe'
  frame.id = 'map'
  frame.style.display = "block"
  mapParent.appendChild(frame)

} else if (frame.style.display === "block") {
  frame.id = 'streetview_iframe'
  map.id = 'map'
  frame.style.display = "none"
  map.removeChild(frame)
  document.querySelector('#map').style.display = 'block'
}


}
//=======================================================================================================================
//         FUNCTION TO DISPLAY THE CAR ICON ON THE MAP

function setMarkers(map) {
if (executed === 0) {
  var response = $.ajax({
      url: 'rideicons/show?start_lat='+start_lat+'&start_lng='+start_lon,
      method: 'GET',
      dataType: 'json',
  }).done(function functionName(data) {
  //   console.log('drivers_location = data');
  // drivers_location = data
    executed += 1
    var image = {
      // src: 'assets/images/car.png',
      url: '<%= image_path('car.png') %>',
      anchor: new google.maps.Point(16, 16)
    };
    for (var i = 0; i < data.length; i++) {
      var data_location = data[i];
      var marker = new google.maps.Marker({
        position: {lat: data_location[0], lng: data_location[1]},
        map: map,
        animation: google.maps.Animation.DROP,
        icon: image,
      });
    }
  })
}
}


//==========================================================================================================================
//    SUBMIT BUTTON
  // setting up event listener on submit location Button

var submit = document.querySelector('.submit')
submit.addEventListener('click', function (event) {
event.preventDefault();
document.getElementById('streetview_iframe').style.display = 'none'
document.getElementById('autocomplete').style.border='none'
document.getElementById('autocomplete2').style.border='none'

apis_requests()
executed = 0
})


//=========================================================================================================================
  // FUNCTION THAT CALL OUR API AND COME BACK WITH THE DATA


function apis_requests() {
var startField = document.getElementById('autocomplete').value
var destinastionField = document.getElementById('autocomplete2').value
if (startField && destinastionField) {
// =====    SHOW THE LOADING PAGE     =======
  var loader = document.getElementById('loader');
  loader.style.display = "block";
  // Saves the history to the database
  $.ajax({
  url: "/google",
  method: "GET",
  data: {
    start_location: JSON.stringify(startField),
    end_location: JSON.stringify(destinastionField),
  }
})
// get start lat and lon using google API
start_address = document.getElementById('autocomplete').value
  var start_cordinates = $.ajax({
  url: "https://maps.googleapis.com/maps/api/geocode/json?address="+start_address+'&key=AIzaSyDxHtxeT7TcaPqz8y2tPRWbqIwB9ROdZfk',
  get: 'GET'
}).done(function() {

  if (start_cordinates.responseJSON.status !== "OK") {
  alert("We can not operate with the start location informed\n\n Error: " + start_cordinates.responseJSON.status);
  loader.style.display = "none";
  document.getElementById('autocomplete').style.border="2px solid red"
  }

  start_lat = start_cordinates.responseJSON.results[0].geometry.location.lat
  start_lon = start_cordinates.responseJSON.results[0].geometry.location.lng
    // get start lat and lon using google API
    end_address = document.getElementById('autocomplete2').value
    var end_cordinates = $.ajax({
      url: "https://maps.googleapis.com/maps/api/geocode/json?address="+end_address+'&key=AIzaSyDxHtxeT7TcaPqz8y2tPRWbqIwB9ROdZfk',
      get: 'GET'
    }).done(function() {

      if (end_cordinates.responseJSON.status !== "OK") {
          alert("We can not operate with the destination informed\n\n Error: " + end_cordinates.responseJSON.status);
          loader.style.display = "none";
          document.getElementById('autocomplete2').style.border="2px solid red"
          }

      end_lat = end_cordinates.responseJSON.results[0].geometry.location.lat
      end_lon = end_cordinates.responseJSON.results[0].geometry.location.lng
// get the data from taxi-fare-api
      var response = $.ajax({
          url: '/price/show?sl='+start_lat+'&slon='+start_lon+'&el='+end_lat+'&elon='+end_lon+'',
          method: 'GET',
          dataType: 'json',
      }).done(function(data) {

if (data.uber[0] === "INVALID PARAMS" && data.lyft[0] === "INVALID PARAMS" ) {
alert('Sorry, no ride was found for the route informed')
loader.style.display = "none";
return
}

// ============================================ RESULTS ========================================================

        // selecting elements
        var welcomeMessage = document.querySelector('.welcome-message')
        var filters = document.querySelector('.filters');
        var result = document.getElementById('div_result');
        var capacity2 = document.querySelector("input[value='2']");
        var capacity4 = document.querySelector("input[value='4']");
        var capacity6 = document.querySelector("input[value='6']");
        var resetFilter = document.getElementById('reset_filters');

        // remove welcome message from landing page`
        welcomeMessage.classList.add('hidden')

        // removes the results from the previous request if there is any
        clearPreviousResults()

        // to enable maps
        initMap()

        // to hide loading page
        loader.style.display = "none";

        // display results in Asc Order
        displayInAscOrder(data)

        // display filters
        filters.style.display = "block";


    // ================================== Filters ========================================

        // 2 capacity
        capacity2.addEventListener('change', function() {
          displayInAscOrderCapacity(data, 2)
        })

        // 4 capacity
        capacity4.addEventListener('change', function() {
          displayInAscOrderCapacity(data, 4)
        })

        // 6 capacity
        capacity6.addEventListener('change', function() {
          displayInAscOrderCapacity(data, 6)
        })

        // reset filters
        resetFilter.addEventListener('click', function() {
          
          clearPreviousResults()
          displayInAscOrder(data);

        })

      }).fail(function () {
        alert('Nothing found')
        loader.style.display = "none";
      })
    }).fail(function () {

    alert('Missing destination. \n\n Error: ' + end_cordinates.responseJSON.error_message)
    loader.style.display = "none";

  })
  }).fail(function () {

  alert('Missing start address. \n\n Error: ' + start_cordinates.responseJSON.error_message)
  loader.style.display = "none";

})
}else {
  if (startField && !destinastionField) {
    document.getElementById('autocomplete2').style.border="2px solid red"

  }else if (!startField && destinastionField) {
    document.getElementById('autocomplete').style.border="2px solid red"

  }else {
    document.getElementById('autocomplete2').style.border="2px solid red"
    document.getElementById('autocomplete').style.border="2px solid red"

  }
}
}

// ========================================================================
// ========== Function for Filters ========================================
// ========================================================================

function displayInAscOrderCapacity(data, number) {

clearPreviousResults()

var results = []
for (var i = 0; i < data.uber.length; i++) {
  if (data.uber[i].capacity === number) {
    results.push(data.uber[i])
  }
}
for (var i = 0; i < data.lyft.length; i++) {
  if (data.lyft[i].capacity === number) {
    results.push(data.lyft[i])
  }
}
sorted_results = results.sort(function(a, b) {
  return a.fare - b.fare
})

createCards(sorted_results)

}
//  ===============================================

function displayInAscOrder(data) {

var results = []
for (var i = 0; i < data.uber.length; i++) {
  results.push(data.uber[i])
}
for (var i = 0; i < data.lyft.length; i++) {
  results.push(data.lyft[i])
}
sorted_results = results.sort(function(a, b) {
  return a.fare - b.fare
})

createCards(sorted_results)

}

// ====================== DRY FUNCTIONS ==================================

function clearPreviousResults() {

  $(".uber_ride").remove();
  $(".lyft_ride").remove();
  $(".taxi").remove();

}

function createCards(sorted_result) {

  var result = document.getElementById('div_result')
  // New cards are made for each ride result
  for (var i = 0; i < sorted_results.length; i++) {
    // create elements
    var div            = document.createElement("div")
    var h3             = document.createElement("h3")
    var cost           = document.createElement("p")
    var eta            = document.createElement("p")
    var start_address  = document.getElementById('autocomplete').value
    var request_button = document.createElement("button")
    var request_link   = document.createElement("a")

    // add properties
    request_button.id = 'request'
    eta.classList.add('eta')
    cost.classList.add('cost')
    div.classList.add('single_result')
    request_link.setAttribute('target', '_blank')
    h3.innerText       = sorted_results[i].type
    cost.innerText     = "$" + sorted_results[i].fare + " " + sorted_results[i].currency
    eta.innerText      = "Arrival Time " + sorted_results[i].eta/60 + " Mins"

    // insert elements
    div.appendChild(h3)
    div.appendChild(cost)
    div.appendChild(eta)
    result.appendChild(div)

    // Request ride button text changes if it is from Lyft or Uber.
    // Class of 'lyft ride' is added for lyft rides and class of 'uber ride' for uber rides

    if (sorted_results[i].type.charAt(0) === 'L' || sorted_results[i].type === 'LyftPlus') {

      var possible_rides = ["Lyft Line", "Lyft", "Lyft Plus",]

      div.classList.add('lyft_ride')

      if (possible_rides.includes(sorted_results[i].type)) {

        var ride_id = sorted_results[i].type.toLowerCase().replace(/\s/g, '_')
        request_link.setAttribute('href', 'https://lyft.com/ride?id=' + ride_id + '&pickup[latitude]=' + start_lat + '&pickup[longitude]=' + start_lon + '&destination[latitude]=' + end_lat + '&destination[longitude]=' + end_lon)
        request_button.innerText = 'Request Lyft'

        request_link.appendChild(request_button)
        div.appendChild(request_link)

      } else {

        var ride_id = sorted_results[i].type.toLowerCase().replace(/\s/g, '_')
        request_link.setAttribute('href', 'https://ride.lyft.com/?')
        request_button.innerText = 'Request Lyft'

        request_link.appendChild(request_button)
        div.appendChild(request_link)

      }
    } else if (sorted_results[i].type.charAt(0) === 'u' || sorted_results[i].type.charAt(0) === 'T' || sorted_results[i].type.charAt(0) === 'U' ) {

      div.classList.add('uber_ride')
      request_link.setAttribute('href', 'https://m.uber.com/?action=setPickup&pickup[latitude]=' + start_lat + '&pickup[longitude]=' + start_lon + '&pickup[formatted_address]=' + start_address + '&dropoff[latitude]=' + end_lat + '&dropoff[longitude]=' + end_lon + '&dropoff[formatted_address]=' + end_address)
      request_button.innerText = 'Request UBER'

      request_link.appendChild(request_button)
      div.appendChild(request_link)

    }
  }
}

// ========================== UNUSED FUNCTION =========================================

function displayAll(data) {
// to show the UBER rides

var result = document.getElementById('div_result')
for (var i = 0; i < data.uber.length; i++) {
  var div             = document.createElement("div")
  var h3              = document.createElement("h3")
  var cost            = document.createElement("p")
  var eta             = document.createElement("p")
  var request_link    = document.createElement("a")
  var request_button  = document.createElement("button")
  var start_address   = document.getElementById('autocomplete').value
  h3.innerText        = data.uber[i].type
  cost.innerText      = "$ " + data.uber[i].currency + " " + data.uber[i].fare
  eta.innerText       = "Arrival Time " + data.uber[i].eta/60 + " Mins"
  div.classList.add("uber_ride", data.uber[i].type.replace(/\s/g, ''))
  request_link.setAttribute('target', '_blank')
  request_link.setAttribute('href', 'https://m.uber.com/?action=setPickup&pickup[latitude]=' + start_lat + '&pickup[longitude]=' + start_lon + '&pickup[formatted_address]=' + start_address + '&dropoff[latitude]=' + end_lat + '&dropoff[longitude]=' + end_lon + '&dropoff[formatted_address]=' + end_address)
  request_button.innerText = 'Request my UBER'
  request_link.appendChild(request_button)
  div.appendChild(h3)
  div.appendChild(currency)
  div.appendChild(eta)
  div.appendChild(request_link)
  result.appendChild(div)
}
// to show the LYFT rides
for (var i = 0; i < data.lyft.length; i++) {
  var possible_rides = ["Lyft Line", "Lyft", "Lyft Plus",]
  var div            = document.createElement("div")
  var h3             = document.createElement("h3")
  var cost           = document.createElement("p")
  var eta            = document.createElement("p")
  var request_link   = document.createElement("a")
  var request_button = document.createElement("button")
  h3.innerText       = data.lyft[i].type
  currency.innerText = "$ " + data.lyft[i].currency + " " + data.lyft[i].fare
  eta.innerText      = "Arrival Time " + data.lyft[i].eta/60 + " Mins"
  request_link.setAttribute('target', '_blank')
  div.classList.add("lyft_ride", data.lyft[i].type.replace(/\s/g, ''))
  div.appendChild(h3)
  div.appendChild(currency)
  div.appendChild(eta)
  result.appendChild(div)

  div.classList.add('lyft_ride')

  if (possible_rides.includes(data.lyft[i].type)) {
    var ride_id = data.lyft[i].type.toLowerCase().replace(/\s/g, '_')
    request_link.setAttribute('href', 'https://lyft.com/ride?id=' + ride_id + '&pickup[latitude]=' + start_lat + '&pickup[longitude]=' + start_lon + '&destination[latitude]=' + end_lat + '&destination[longitude]=' + end_lon)
    request_button.innerText = 'Request Lyft'
    request_link.appendChild(request_button)
    div.appendChild(request_link)
  }else {
    var ride_id         = data.lyft.type.toLowerCase().replace(/\s/g, '_')
    request_link.setAttribute('href', 'https://ride.lyft.com/?')
    request_button.innerText = 'Request Lyft'
    request_link.appendChild(request_button)
    div.appendChild(request_link)
  }
}
}

var autocomplete = document.getElementById('autocomplete')
autocomplete.addEventListener('change', function () {
  document.getElementById('autocomplete').style.border = ''
})

var autocomplete = document.getElementById('autocomplete2')
autocomplete.addEventListener('change', function () {
  document.getElementById('autocomplete2').style.border = ''
})
